apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: mcp-sse-headers
  namespace: mcp-rancher
spec:
  headers:
    # Useful for browser dev, harmless for n8n server-side:
    accessControlAllowMethods:
      - GET
      - OPTIONS
    accessControlAllowHeaders:
      - "*"
    accessControlAllowOriginList:
      - "*"
    # SSE niceties:
    customResponseHeaders:
      Cache-Control: "no-cache, no-transform"

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: mcp-rancher.kryczech.net-sse
  namespace: mcp-rancher
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: Host(`mcp-rancher.kryczech.net`) && PathPrefix(`/mcp`)
    services:
    - name: mcp-rancher
      # Traefik will terminate TLS using the `tls.secretName` below (cert-manager).
      # The backend service listens on port 80 (ClusterIP -> container 8765).
      # Forward plaintext HTTP to the service port 80; do not use 443 here.
      port: 80
    middlewares:
      - name: mcp-sse-headers
  tls:
    secretName: mcp-rancher-server-tls

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: mcp-rancher.kryczech.net-discover
  namespace: mcp-rancher
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: Host(`mcp-rancher.kryczech.net`) && (Path(`/discover`) || PathPrefix(`/discover`))
    services:
    - name: mcp-rancher
      # Traefik will terminate TLS using the `tls.secretName` below (cert-manager).
      # The backend service listens on port 80 (ClusterIP -> container 8765).
      # Forward plaintext HTTP to the service port 80; do not use 443 here.
      port: 80
  tls:
    secretName: mcp-rancher-server-tls